{"remainingRequest":"D:\\Strive\\MyBoot\\TJDemo\\my-tj-admin\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Strive\\MyBoot\\TJDemo\\my-tj-admin\\src\\views\\customer\\CustomerList.vue?vue&type=style&index=0&id=dbe57fba&lang=less","dependencies":[{"path":"D:\\Strive\\MyBoot\\TJDemo\\my-tj-admin\\src\\views\\customer\\CustomerList.vue","mtime":1702378979066},{"path":"D:\\Strive\\MyBoot\\TJDemo\\my-tj-admin\\node_modules\\css-loader\\dist\\cjs.js","mtime":1700642142447},{"path":"D:\\Strive\\MyBoot\\TJDemo\\my-tj-admin\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":1700642145049},{"path":"D:\\Strive\\MyBoot\\TJDemo\\my-tj-admin\\node_modules\\postcss-loader\\src\\index.js","mtime":1700642143399},{"path":"D:\\Strive\\MyBoot\\TJDemo\\my-tj-admin\\node_modules\\less-loader\\dist\\cjs.js","mtime":1700737388908},{"path":"D:\\Strive\\MyBoot\\TJDemo\\my-tj-admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1700642141496},{"path":"D:\\Strive\\MyBoot\\TJDemo\\my-tj-admin\\node_modules\\vue-loader\\lib\\index.js","mtime":1700642144174}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCg0KLmhvbWUgew0KICBoMyB7DQogICAgdGV4dC1hbGlnbjogY2VudGVyOw0KICB9DQp9DQo="},{"version":3,"sources":["CustomerList.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmUA;AACA;AACA;AACA;AACA","file":"CustomerList.vue","sourceRoot":"src/views/customer","sourcesContent":["<template>\r\n  <div class=\"home\">\r\n    <h3>2023及其往年利润分析展示图</h3>\r\n    <!-- 限定空间的大小，及其id绑定 -->\r\n    <el-col :span=\"12\">\r\n      <div id=\"myChart\" :style=\"{ width: '650px', height: '500px' }\"></div>\r\n      <div id=\"myGather\" :style=\"{ width: '650px', height: '500px' }\"></div>\r\n    </el-col>\r\n    <el-col :span=\"12\">\r\n      <div id=\"Chart02\" :style=\"{ width: '650px', height: '500px' }\"></div>\r\n      <div id=\"myGather2\" :style=\"{ width: '650px', height: '500px' }\"></div>\r\n    </el-col>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: \"customerlist\",\r\n  data() {\r\n    return {\r\n      // 要显示的数据进行数据map展示\r\n      data: [\r\n        { month: \"xiaohh\", num: \"1\" },\r\n        { month: \"xiaohh\", num: \"4\" },\r\n        { month: \"xiaohh\", num: \"5\" },\r\n        { month: \"xiaohh\", num: \"2\" },\r\n      ],\r\n      data1: [],\r\n      data02: [\r\n        { month: \"xiaohh\", personnel: \"1\" },\r\n        { month: \"xiaohh\", personnel: \"4\" },\r\n        { month: \"xiaohh\", personnel: \"5\" },\r\n        { month: \"xiaohh\", personnel: \"2\" },\r\n      ],\r\n      gatherdata: [\r\n        { year: \"xiaohh\", yearnum: \"1\" },\r\n        { year: \"xiaohh\", yearnum: \"4\" },\r\n        { year: \"xiaohh\", yearnum: \"5\" },\r\n        { year: \"xiaohh\", yearnum: \"2\" },\r\n      ],\r\n      gatherdata02: [\r\n        { gatheruser: \"xiaohh\", gatherusernum: \"1\" },\r\n        { gatheruser: \"xiaohh\", gatherusernum: \"4\" },\r\n        { gatheruser: \"xiaohh\", gatherusernum: \"5\" },\r\n        { gatheruser: \"xiaohh\", gatherusernum: \"2\" },\r\n      ],\r\n    };\r\n  },\r\n  mounted() {\r\n    // 调用并且改方法\r\n    this.Draw();\r\n    this.Draw2();\r\n    // axios调用后端接口\r\n    this.$axios\r\n      .get(\"http://localhost:8081/month/list\")\r\n      .then((res) => {\r\n        // 获取后台数据，进行查看，看看是什么形式的数据，必要时进行转换\r\n        console.log(res.data.data);\r\n        // 读取接口请求成功回传回来的数据\r\n        var books = res.data.data;\r\n        // 定义数组，存放一会覆盖echarts图形的数据\r\n        var data = [];\r\n        // 循环遍历数组，取出数据，转成和data一样的格式\r\n        for (var i = 0; i < books.length; i++) {\r\n          var d = { month: \"\", num: 0, personnel: 0 };\r\n          d.month = books[i].month;\r\n          d.personnel = books[i].personnel;\r\n          d.num = books[i].num;\r\n          // 往data数组中添加数据\r\n          data.push(d);\r\n        }\r\n        // 排序，b - a降序——a - b升序\r\n        //  data.sort((a , b) => b.num - a.num)\r\n        // 覆盖data(){}中全局变量的数据\r\n        this.data = data;\r\n        // 画出图形\r\n        this.Draw();\r\n        this.Draw2();\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n        alert(\"请求失败，接口错误！\");\r\n      });\r\n    this.Gather();\r\n    this.$axios\r\n      .get(\"http://localhost:8081/gather/list\")\r\n      .then((res) => {\r\n        // 获取后台数据，进行查看，看看是什么形式的数据，必要时进行转换\r\n        console.log(res.data.data);\r\n        // 读取接口请求成功回传回来的数据\r\n        var gathers = res.data.data;\r\n        // 定义数组，存放一会覆盖echarts图形的数据\r\n        var data = [];\r\n        // 循环遍历数组，取出数据，转成和data一样的格式\r\n        for (var i = 0; i < gathers.length; i++) {\r\n          var d = { year: \"\", yearnum: 0 };\r\n          d.year = gathers[i].year;\r\n          d.yearnum = gathers[i].yearnum;\r\n          // 往data数组中添加数据\r\n          data.push(d);\r\n        }\r\n        // 排序，b - a降序——a - b升序\r\n        //  data.sort((a , b) => b.num - a.num)\r\n        // 覆盖data(){}中全局变量的数据\r\n        this.gatherdata = data;\r\n        // 画出图形\r\n        this.Gather();\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n        alert(\"请求失败，接口错误！\");\r\n      });\r\n    this.Gather2();\r\n    this.$axios\r\n      .get(\"http://localhost:8081/gather/list\")\r\n      .then((res) => {\r\n        // 获取后台数据，进行查看，看看是什么形式的数据，必要时进行转换\r\n        console.log(res.data.data);\r\n        // 读取接口请求成功回传回来的数据\r\n        var gathers = res.data.data;\r\n        // 定义数组，存放一会覆盖echarts图形的数据\r\n        var data = [];\r\n        // 循环遍历数组，取出数据，转成和data一样的格式\r\n        for (var i = 0; i < gathers.length; i++) {\r\n          var d = { gatheruser: \"\", gatherusernum: 0 };\r\n          d.gatheruser = gathers[i].gatheruser;\r\n          d.gatherusernum = gathers[i].gatherusernum;\r\n          // 往data数组中添加数据\r\n          data.push(d);\r\n        }\r\n        // 排序，b - a降序——a - b升序\r\n        //  data.sort((a , b) => b.num - a.num)\r\n        // 覆盖data(){}中全局变量的数据\r\n        this.gatherdata02 = data;\r\n        // 画出图形\r\n        this.Gather2();\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n        alert(\"请求失败，接口错误！\");\r\n      });\r\n  },\r\n  methods: {\r\n    // 定义echarts的方法进行显示\r\n    Draw() {\r\n      // axios调用后端接口\r\n      this.$axios\r\n        .get(\"http://localhost:8081/month/list\")\r\n        .then((res) => {\r\n          // 获取后台数据，进行查看，看看是什么形式的数据，必要时进行转换\r\n          console.log(res.data.data);\r\n          // 读取接口请求成功回传回来的数据\r\n          let getFunc = res.data.data;\r\n          console.log(getFunc);\r\n          var max = getFunc[0].num;\r\n          for (var i = 0; i < getFunc.length; i++) {\r\n            if (getFunc[i].num > max) {\r\n              max = getFunc[i].num;\r\n            }\r\n          }\r\n          console.log(max);\r\n          // console.log(getFunc.itemStyle.color);\r\n          console.log(getFunc);\r\n          // 定义数组，存放一会覆盖echarts图形的数据\r\n          var data_data = [];\r\n          var data_tx = [],\r\n            k;\r\n          // 循环遍历数组，取出数据，转成和data一样的格式\r\n          for (var i = 0; i < getFunc.length; i++) {\r\n            var d = { month: \"\", num: 0, personnel: 0 };\r\n            d.month = getFunc[i].month;\r\n            d.personnel = getFunc[i].personnel;\r\n            d.num = getFunc[i].num;\r\n            // 往data数组中添加数据\r\n            if (max == getFunc[i].num) {\r\n              data_data.push({\r\n                value: getFunc[i].num,\r\n                itemStyle: {\r\n                  color: \"#a90000\",\r\n                },\r\n              });\r\n            } else {\r\n              data_data.push({ value: getFunc[i].num });\r\n            }\r\n            data_tx.push({ value: getFunc[i].month });\r\n          }\r\n          // 基于准备好的dom，初始化echarts，绘制图表\r\n          let myChart = this.$echarts.init(document.getElementById(\"myChart\"));\r\n          //  配置项\r\n          myChart.setOption({\r\n            title: {\r\n              text: \"2023数量销售分析图\",\r\n            },\r\n            tooltip: {},\r\n            legend: {\r\n              data: [\"月份销售数量\"],\r\n            },\r\n            xAxis: {\r\n              type: \"category\",\r\n              data: data_tx,\r\n            },\r\n            yAxis: {\r\n              type: \"value\",\r\n            },\r\n            series: [\r\n              {\r\n                name: \"月份销售数量\",\r\n                data: data_data,\r\n                type: \"bar\",\r\n              },\r\n            ],\r\n          });\r\n        })\r\n        .catch((err) => {\r\n          console.log(err);\r\n          alert(\"请求失败，接口错误！\");\r\n        });\r\n    },\r\n    Draw2() {\r\n      let myChart = this.$echarts.init(document.getElementById(\"Chart02\"));\r\n      myChart.setOption({\r\n        title: {\r\n          text: \"2023用户数量分布图\",\r\n        },\r\n        tooltip: {},\r\n        legend: {\r\n          data: [\"用户数量\"],\r\n        },\r\n        xAxis: {\r\n          type: \"category\",\r\n          data: this.data.map((d) => d.month),\r\n        },\r\n        yAxis: {\r\n          type: \"value\",\r\n        },\r\n        series: [\r\n          {\r\n            name: \"用户数量\",\r\n            type: \"bar\",\r\n            data: this.data.map((d) => d.personnel),\r\n            type: \"line\",\r\n            // 弯曲\r\n            // smooth: true,\r\n          },\r\n        ],\r\n      });\r\n    },\r\n    Gather() {\r\n      let myGather = this.$echarts.init(document.getElementById(\"myGather\"));\r\n      myGather.setOption({\r\n        title: {\r\n          text: \"往年销售量数据分析\",\r\n        },\r\n        tooltip: {},\r\n        legend: {\r\n          data: [\"销售额总额\"],\r\n        },\r\n        xAxis: {\r\n          type: \"category\",\r\n          data: this.gatherdata.map((d) => d.year),\r\n        },\r\n        yAxis: {\r\n          type: \"value\",\r\n        },\r\n        series: [\r\n          {\r\n            name: \"销售额总额\",\r\n            type: \"bar\",\r\n            data: this.gatherdata.map((d) => d.yearnum),\r\n            type: \"line\",\r\n          },\r\n        ],\r\n      });\r\n    },\r\n    Gather2() {\r\n      let myGather2 = this.$echarts.init(document.getElementById(\"myGather2\"));\r\n      myGather2.setOption({\r\n        title: {\r\n          text: \"往年用户数据分析\",\r\n        },\r\n        tooltip: {\r\n          trigger: \"axis\",\r\n          axisPointer: {\r\n            type: \"shadow\",\r\n          },\r\n        },\r\n        legend: {\r\n          data: [\"用户数量\"],\r\n        },\r\n        grid: {\r\n          left: \"3%\",\r\n          right: \"4%\",\r\n          bottom: \"3%\",\r\n          containLabel: true,\r\n        },\r\n        xAxis: [\r\n          {\r\n            type: \"category\",\r\n            data: this.gatherdata02.map((d) => d.gatheruser),\r\n            axisTick: {\r\n              alignWithLabel: true,\r\n            },\r\n          },\r\n        ],\r\n        yAxis: [\r\n          {\r\n            type: \"value\",\r\n          },\r\n        ],\r\n        series: [\r\n          {\r\n            name: \"用户数量\",\r\n            type: \"bar\",\r\n            barWidth: \"60%\",\r\n            data: this.gatherdata02.map((d) => d.gatherusernum),\r\n          },\r\n        ],\r\n      });\r\n    },\r\n  },\r\n};\r\n</script>\r\n<style lang=\"less\">\r\n.home {\r\n  h3 {\r\n    text-align: center;\r\n  }\r\n}\r\n</style>"]}]}